var searchIndex = JSON.parse('{\
"sliding_puzzle":{"doc":"","t":[3,4,7,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,11,11,11,11,5,5,12,0,11,11,11,11,11,11,11,11,0,11,11,5,5,12,12,12,12,12,12,12,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Cli","Command","GLOBAL","Generate","Search","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","fmt","fmt","from","from","from_arg_matches","from_arg_matches","get_output","has_subcommand","into","into","into_app","into_app_for_update","main","print_malloc_stats","print_malloc_stats","search","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","util","vzip","vzip","write_fail_result","write_success_result","algorithm","block_count","input","output","output","shuffle_round","size","Algorithm","IDAStar","IDDFS","Manual","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","execute","fmt","from","into","partial_cmp","to_owned","to_possible_value","try_from","try_into","type_id","value_variants","vzip","vec2_from_str"],"q":["sliding_puzzle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sliding_puzzle::Command","","","","","","","sliding_puzzle::search","","","","","","","","","","","","","","","","","","","","","","","sliding_puzzle::util"],"d":["Sliding puzzle CLI entry","","","Generate a board","Search optimal solution of given board","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Get output from given path. If not, use stdout","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Print malloc statistic after execution","","","","","","","","","","","","","","","Algorithm to use, default to IDDFS","At most how many blocks should be generated","Path to the input file","Path to the output file, default to stdout","Path to the output file, default to stdout","At most how many round to shuffle the board","The output board size","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,1,1,2,2,1,1,2,1,2,1,2,2,1,2,1,2,1,0,1,2,1,2,2,0,0,2,0,2,1,2,1,2,1,2,1,0,2,1,0,0,3,4,3,3,4,4,4,0,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,0],"f":[null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["option",4,[["string",3]]]],["result",6,[["bufwriter",3,[["box",3,[["write",8]]]]]]]],[[["str",0]],["bool",0]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[["write",8]],["result",6]],[[["duration",3],["vec",3,[["move",6]]],["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["algorithm",4]],[[["",0],["",0]]],[[["",0],["algorithm",4]],["ordering",4]],[[["",0],["algorithm",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["algorithm",4],["board",3]],["option",4,[["vec",3,[["move",6]]]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["algorithm",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],[[["str",0]],["result",4,[["vec2",3],["string",3]]]]],"p":[[4,"Command"],[3,"Cli"],[13,"Search"],[13,"Generate"],[4,"Algorithm"]]},\
"sliding_puzzle_core":{"doc":"","t":[3,3,4,13,13,3,6,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Board","BoardState","Dir","Down","Left","Matrix2D","Move","Right","Up","Vec2","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","default","deref","deref_mut","eq","eq","eq","eq","eq","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","from_str","from_vec","generate","get","get_mut","hash","hash","hash","heuristic","into","into","into","into","into","inverse","is_goal","move_block","ne","ne","ne","ne","new","partial_cmp","partial_cmp","partial_cmp","possible_moves","size","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec2","try_fill","try_fill_without_cover","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","x","y"],"q":["sliding_puzzle_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Board of sliding puzzle","Board state, store all block data","Direction on the board","","","","Represente a move of a board","","","A (x, y) vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a matrix filled with given value","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Create matrix from given vector","Randonly generate a valid board","Get a immutable reference of cell","Get a mutable reference of cell","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get inverse direction","","","","","","","","","","","Get possible moves from current state","","Get a reference to the board’s state.","","","","","","","","Convert direction to corresponding vector","Try fill given area with given value, return error if the …","Try fill a given area without overwrite cells have already …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,0,0,1,1,0,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,3,5,2,3,4,5,4,4,1,2,3,4,5,4,1,2,2,3,4,5,5,1,2,3,4,5,2,4,4,2,4,4,1,3,5,2,1,2,3,4,5,1,2,2,2,3,4,5,5,1,3,5,2,4,2,1,2,3,4,5,2,5,1,4,4,1,2,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["dir",4]],[[["",0]],["board",3]],[[["",0]],["boardstate",3]],[[["",0]],["matrix2d",3]],[[["",0]],["vec2",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["dir",4]],["ordering",4]],[[["",0],["boardstate",3]],["ordering",4]],[[["",0],["vec2",3]],["ordering",4]],[[],["board",3]],[[],["boardstate",3]],[[],["matrix2d",3]],[[],["vec2",3]],[[["",0]]],[[["",0]]],[[["",0],["dir",4]],["bool",0]],[[["",0],["board",3]],["bool",0]],[[["",0],["boardstate",3]],["bool",0]],[[["",0],["matrix2d",3]],["bool",0]],[[["",0],["vec2",3]],["bool",0]],[[["vec2",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["vec2",3],["vec",3]],["result",4,[["string",3]]]],[[["vec2",3],["i8",0],["usize",0]]],[[["",0],["vec2",3]],["option",4]],[[["",0],["vec2",3]],["option",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["i32",0]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]],["bool",0]],[[["",0],["i8",0],["dir",4]],["result",4,[["string",3]]]],[[["",0],["board",3]],["bool",0]],[[["",0],["boardstate",3]],["bool",0]],[[["",0],["matrix2d",3]],["bool",0]],[[["",0],["vec2",3]],["bool",0]],[[["i8",0],["i8",0]]],[[["",0],["dir",4]],["option",4,[["ordering",4]]]],[[["",0],["boardstate",3]],["option",4,[["ordering",4]]]],[[["",0],["vec2",3]],["option",4,[["ordering",4]]]],[[["",0]],["vec",3,[["move",6]]]],[[["",0]],["vec2",3]],[[["",0]],["boardstate",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["vec2",3]],[[["",0],["vec2",3],["vec2",3]],["result",4,[["string",3]]]],[[["",0],["vec2",3],["vec2",3]],["result",4,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[["matrix2d",3,[["i8",0]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null],"p":[[4,"Dir"],[3,"Board"],[3,"BoardState"],[3,"Matrix2D"],[3,"Vec2"]]},\
"sliding_puzzle_search":{"doc":"","t":[0,5,5,5],"n":["search","idastar","iddfs","manual"],"q":["sliding_puzzle_search","sliding_puzzle_search::search","",""],"d":["","IDA*","IDDFS",""],"i":[0,0,0,0],"f":[null,[[["board",3]],["option",4,[["vec",3,[["move",6]]]]]],[[["board",3]],["option",4,[["vec",3,[["move",6]]]]]],[[["board",3]],["option",4,[["vec",3,[["move",6]]]]]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};